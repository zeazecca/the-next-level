// Generated by Haxe 4.2.1+bf9ff69
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
var FloatAdapter = function(input) {
	this.input = input;
};
FloatAdapter.__name__ = true;
FloatAdapter.prototype = {
	get: function() {
		return ingot_ext_Strings.toFloat(this.input.value);
	}
	,set: function(f) {
		this.input.placeholder = ingot_ext_Floats.toStr(f,1);
	}
};
function Main_closestIndex(type,target) {
	var iter = ingot_ext_Iterators.indexed(new haxe_iterators_ArrayIterator(Main_data));
	var first = 0;
	while(iter.hasNext()) {
		var it = iter.next();
		var f = type(it.value) - target;
		var f1 = type(Main_data[first]) - target;
		if((f < 0 ? -f : f) < (f1 < 0 ? -f1 : f1)) {
			first = it.key;
		}
	}
	return first;
}
function Main_defaultEndurance(entry) {
	return entry[Main_HP] / Main_DEFAULT_PLAYER_HITPROB;
}
function Main_defaultFerocity(entry) {
	return entry[Main_DMG] * Main_DEFAULT_CREATURE_HITPROB;
}
function Main_prod(entry) {
	return Main_defaultEndurance(entry) * Main_defaultFerocity(entry);
}
function Main_playerHitprob(entry,ac) {
	return ingot_ext_Maybes.mapOr(ac,function(ac) {
		return ingot_ext_Floats.clamp(Main_DEFAULT_PLAYER_HITPROB + (entry[Main_AC] - ac) * Main_HITPROB_INCREMENTS,Main_MIN_HITPROB,Main_MAX_HITPROB);
	},Main_DEFAULT_PLAYER_HITPROB);
}
function Main_computeAcFromHp(lvlEntry,endurance,hp) {
	return lvlEntry[Main_AC] + (Main_DEFAULT_PLAYER_HITPROB - ingot_ext_Floats.clamp(hp / endurance,Main_MIN_HITPROB,Main_MAX_HITPROB)) / Main_HITPROB_INCREMENTS;
}
function Main_computeHitFromDmg(lvlEntry,ferocity,dmg) {
	return lvlEntry[Main_HIT] + (ingot_ext_Floats.clamp(ferocity / dmg,Main_MIN_HITPROB,Main_MAX_HITPROB) - Main_DEFAULT_CREATURE_HITPROB) / Main_HITPROB_INCREMENTS;
}
function Main_creatureHitprob(entry,hit) {
	return ingot_ext_Maybes.mapOr(hit,function(hit) {
		return ingot_ext_Floats.clamp(Main_DEFAULT_CREATURE_HITPROB + (hit - entry[Main_HIT]) * Main_HITPROB_INCREMENTS,Main_MIN_HITPROB,Main_MAX_HITPROB);
	},Main_DEFAULT_CREATURE_HITPROB);
}
function Main_computeEndurance(lvlEntry,hp,ac,dmg,hit) {
	if(hp._hx_index == 0) {
		if(ac._hx_index == 0) {
			return hp.v / Main_playerHitprob(lvlEntry,ingot_ds_Maybe.Just(ac.v));
		} else if(dmg._hx_index == 0) {
			if(hit._hx_index == 0) {
				return Main_prod(lvlEntry) / Main_computeFerocity(lvlEntry,hp,ac,dmg,hit);
			} else {
				return Main_defaultEndurance(lvlEntry);
			}
		} else {
			return Main_defaultEndurance(lvlEntry);
		}
	} else if(dmg._hx_index == 0) {
		if(hit._hx_index == 0) {
			return Main_prod(lvlEntry) / Main_computeFerocity(lvlEntry,hp,ac,dmg,hit);
		} else {
			return Main_defaultEndurance(lvlEntry);
		}
	} else {
		return Main_defaultEndurance(lvlEntry);
	}
}
function Main_computeFerocity(lvlEntry,hp,ac,dmg,hit) {
	if(dmg._hx_index == 0) {
		if(hit._hx_index == 0) {
			return dmg.v * Main_creatureHitprob(lvlEntry,ingot_ds_Maybe.Just(hit.v));
		} else if(hp._hx_index == 0) {
			if(ac._hx_index == 0) {
				return Main_prod(lvlEntry) / Main_computeEndurance(lvlEntry,hp,ac,dmg,hit);
			} else {
				return Main_defaultFerocity(lvlEntry);
			}
		} else {
			return Main_defaultFerocity(lvlEntry);
		}
	} else if(ac._hx_index == 0) {
		if(hp._hx_index == 0) {
			return Main_prod(lvlEntry) / Main_computeEndurance(lvlEntry,hp,ac,dmg,hit);
		} else {
			return Main_defaultFerocity(lvlEntry);
		}
	} else {
		return Main_defaultFerocity(lvlEntry);
	}
}
function Main_interpolateFromLvl(lvl,hp,ac,dmg,hit) {
	var lvlEntry = Main_data[Main_closestIndex(function(entry) {
		return entry[Main_LVL];
	},lvl)];
	var endurance = Main_computeEndurance(lvlEntry,hp,ac,dmg,hit);
	var ferocity = Main_computeFerocity(lvlEntry,hp,ac,dmg,hit);
	var hp1 = ingot_ext_Maybes.unwrapOrElse(hp,function() {
		return endurance * Main_playerHitprob(lvlEntry,ac);
	});
	var lvlEntry1 = lvlEntry;
	var endurance1 = endurance;
	var hp = hp1;
	var ac1 = ingot_ext_Maybes.unwrapOrElse(ac,function() {
		return Main_computeAcFromHp(lvlEntry1,endurance1,hp);
	});
	var dmg1 = ingot_ext_Maybes.unwrapOrElse(dmg,function() {
		return ferocity / Main_creatureHitprob(lvlEntry,hit);
	});
	var lvlEntry2 = lvlEntry;
	var ferocity1 = ferocity;
	var dmg = dmg1;
	return [lvl,hp1,ac1,dmg1,ingot_ext_Maybes.unwrapOrElse(hit,function() {
		return Main_computeHitFromDmg(lvlEntry2,ferocity1,dmg);
	})];
}
function Main_computeLvl(lvl,hp,ac,dmg,hit) {
	switch(lvl._hx_index) {
	case 0:
		return lvl.v;
	case 1:
		var iter = ingot_ext_Iterators.indexed(new haxe_iterators_ArrayIterator(Main_data));
		var first = { idx : 0, err : Infinity};
		while(iter.hasNext()) {
			var it = iter.next();
			var values = Main_interpolateFromLvl(it.value[Main_LVL],hp,ac,dmg,hit);
			var max = values.length;
			var it_min = Main_HP;
			var first1 = 0.0;
			while(it_min < max) {
				var it1 = it_min++;
				first1 += Math.pow(1 - values[it1] / it.value[it1],2.0);
			}
			var err = first1;
			if(err < first.err) {
				first = { idx : it.key, err : err};
			}
		}
		return Main_data[first.idx][Main_LVL];
	}
}
function Main_calculator(lvl,hp,ac,dmg,hit) {
	var lvl1 = lvl.get();
	var hp1 = hp.get();
	var ac1 = ac.get();
	var dmg1 = dmg.get();
	var hit1 = hit.get();
	var outputs = Main_interpolateFromLvl(Main_computeLvl(lvl1,hp1,ac1,dmg1,hit1),hp1,ac1,dmg1,hit1);
	lvl.set(outputs[Main_LVL]);
	hp.set(outputs[Main_HP]);
	ac.set(outputs[Main_AC]);
	dmg.set(outputs[Main_DMG]);
	hit.set(outputs[Main_HIT]);
}
function Main_main() {
	var lvlInput = window.document.getElementById("level");
	var hpInput = window.document.getElementById("hp");
	var acInput = window.document.getElementById("ac");
	var dmgInput = window.document.getElementById("dmg");
	var hitInput = window.document.getElementById("hit");
	var lvl = new FloatAdapter(window.document.getElementById("level"));
	var hp = new FloatAdapter(window.document.getElementById("hp"));
	var ac = new FloatAdapter(window.document.getElementById("ac"));
	var dmg = new FloatAdapter(window.document.getElementById("dmg"));
	var hit = new FloatAdapter(window.document.getElementById("hit"));
	Main_calculator(lvl,hp,ac,dmg,hit);
	var lvl1 = lvl;
	var hp1 = hp;
	var ac1 = ac;
	var dmg1 = dmg;
	var hit1 = hit;
	var calculator = function() {
		Main_calculator(lvl1,hp1,ac1,dmg1,hit1);
	};
	lvlInput.addEventListener("change",calculator);
	hpInput.addEventListener("change",calculator);
	acInput.addEventListener("change",calculator);
	dmgInput.addEventListener("change",calculator);
	hitInput.addEventListener("change",calculator);
}
Math.__name__ = true;
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var ingot_ds_Maybe = $hxEnums["ingot.ds.Maybe"] = { __ename__:true,__constructs__:null
	,Just: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"ingot.ds.Maybe",toString:$estr}; },$_._hx_name="Just",$_.__params__ = ["v"],$_)
	,None: {_hx_name:"None",_hx_index:1,__enum__:"ingot.ds.Maybe",toString:$estr}
};
ingot_ds_Maybe.__constructs__ = [ingot_ds_Maybe.Just,ingot_ds_Maybe.None];
var ingot_ext_Floats = function() { };
ingot_ext_Floats.__name__ = true;
ingot_ext_Floats.clamp = function(f,min,max) {
	var f1 = f <= max ? f : max;
	if(f1 <= min) {
		return min;
	} else {
		return f1;
	}
};
ingot_ext_Floats.toStr = function(f,precision) {
	if(isNaN(f)) {
		return "NaN";
	}
	if(f == 0.0) {
		return "0." + ingot_ext_Strings.repeat("0",precision);
	}
	var buf_b = "";
	if(f < 0.0) {
		buf_b += String.fromCodePoint(45);
	}
	if(!isFinite(f)) {
		buf_b += "inf";
		return buf_b;
	}
	if(f < 0) {
		f = -f;
	}
	var p = Math.pow(10,precision);
	var ipart = Math.floor(f);
	var fpart = Math.round((f - ipart) * p);
	buf_b += ipart == null ? "null" : "" + ipart;
	if(fpart == 0) {
		buf_b += String.fromCodePoint(46);
		var _g = 0;
		var _g1 = precision;
		while(_g < _g1) {
			_g++;
			buf_b += String.fromCodePoint(48);
		}
	} else {
		buf_b += ".";
		p /= 10;
		while(fpart < p) {
			p /= 10;
			buf_b += String.fromCodePoint(48);
		}
		buf_b += fpart == null ? "null" : "" + fpart;
	}
	return buf_b;
};
var ingot_ext_Iterators = function() { };
ingot_ext_Iterators.__name__ = true;
ingot_ext_Iterators.indexed = function(iter) {
	return new ingot_ext__$Iterators_IndexedIterator(iter);
};
var ingot_ext__$Iterators_IndexedIterator = function(iter) {
	this.iter = iter;
	this.i = 0;
};
ingot_ext__$Iterators_IndexedIterator.__name__ = true;
ingot_ext__$Iterators_IndexedIterator.prototype = {
	hasNext: function() {
		return this.iter.hasNext();
	}
	,next: function() {
		return { key : this.i++, value : this.iter.next()};
	}
};
var ingot_ext_Maybes = function() { };
ingot_ext_Maybes.__name__ = true;
ingot_ext_Maybes.mapOr = function(v,fun,def) {
	switch(v._hx_index) {
	case 0:
		return fun(v.v);
	case 1:
		return def;
	}
};
ingot_ext_Maybes.unwrapOrElse = function(v,fallback) {
	switch(v._hx_index) {
	case 0:
		return v.v;
	case 1:
		return fallback();
	}
};
var ingot_ext_Strings = function() { };
ingot_ext_Strings.__name__ = true;
ingot_ext_Strings.repeat = function(str,n) {
	var buf_b = "";
	var _g = 0;
	while(_g < n) {
		++_g;
		buf_b += str == null ? "null" : "" + str;
	}
	return buf_b;
};
ingot_ext_Strings.toFloat = function(str) {
	var f = parseFloat(str);
	if(isNaN(f)) {
		return ingot_ds_Maybe.None;
	} else {
		return ingot_ds_Maybe.Just(f);
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
var Main_data = [[-3.0,14.81336806,14.0,1.807830801,5.0],[-2.0,16.22723167,14.0,1.98037942,5.0],[-1.0,17.77604167,14.0,2.169396961,5.0],[0.0,19.47267801,14.0,2.376455304,5.0],[1.0,21.33125,14.0,2.603276353,5.0],[2.0,22.53402778,14.0,4.515669516,5.0],[3.0,30.04097222,14.0,6.428062678,5.0],[4.0,32.39097222,15.0,8.34045584,6.0],[5.0,53.70069444,16.0,10.252849,7.0],[6.0,54.80069444,16.0,12.16524217,7.0],[7.0,56.50694444,16.0,14.07763533,7.0],[8.0,59.20694444,17.0,16.16096866,8.0],[9.0,62.99444444,18.0,18.09472934,9.0],[10.0,62.99444444,18.0,20.24216524,9.0],[11.0,79.43541667,18.0,22.19729345,9.0],[12.0,79.43541667,18.0,27.48575499,9.0],[13.0,81.87291667,19.0,29.71866097,10.0],[14.0,89.12916667,19.0,31.95156695,10.0],[15.0,91.98125,19.0,34.18447293,10.0],[16.0,93.78125,19.0,40.51994302,10.0],[17.0,127.835,20.0,43.00925926,11.0],[18.0,127.835,20.0,45.4985755,11.0],[19.0,130.11,20.0,52.0477208,11.0],[20.0,150.9808333,20.0,55.60541311,11.0],[21.0,168.8017033,20.0,62.16874181,11.0],[22.0,188.7260417,20.0,69.50676638,11.0],[23.0,211.0021291,20.0,77.71092726,11.0],[24.0,235.9075521,20.0,86.88345798,11.0],[25.0,263.7526614,20.0,97.13865908,11.0],[26.0,294.8844401,20.0,108.6043225,11.0],[27.0,329.6908268,20.0,121.4233238,11.0],[29.0,412.1135335,20.0,151.7791548,11.0],[30.0,460.7569377,20.0,169.6942539,11.0]];
var Main_LVL = 0;
var Main_HP = 1;
var Main_AC = 2;
var Main_DMG = 3;
var Main_HIT = 4;
var Main_DEFAULT_PLAYER_HITPROB = 0.6;
var Main_DEFAULT_CREATURE_HITPROB = 0.6;
var Main_MIN_HITPROB = 0.05;
var Main_MAX_HITPROB = 0.95;
var Main_HITPROB_INCREMENTS = 0.05;
Main_main();
})({});
